---
description: A set of twelve best practices for building modern software-as-a-service (SaaS) applications, emphasizing speed, reliability, agility, and portability
---
I. Codebase
One codebase tracked in revision control, many deploys

An application is always tracked in a version control system (like Git). There's a one-to-one correlation between a codebase and an app. While there can be many deployments of the same app (e.g., in development, staging, and production environments), they all share the same codebase.

II. Dependencies
Explicitly declare and isolate dependencies

An application must explicitly declare all its dependencies via a dependency declaration manifest (e.g., a requirements.txt or Pipfile in Python). It should also use a dependency isolation tool during execution to ensure that no implicit dependencies "leak in" from the surrounding system.

III. Config
Store config in the environment

Configuration, which is anything that varies between deployments (e.g., database credentials, API keys), should be stored in the environment. This keeps the configuration separate from the code and allows the same codebase to be used for different deployments with different configurations.

IV. Backing Services
Treat backing services as attached resources

A backing service is any service the app consumes over the network, such as a database, message queue, or caching system. The Twelve-Factor App treats these as attached resources, which can be swapped out without changing the application's code. For example, you should be able to switch from a local PostgreSQL database to a managed one on AWS by just changing the configuration.

V. Build, Release, Run
Strictly separate build and run stages

The deployment process should be broken down into three distinct stages:

Build stage: Converts the code into an executable bundle (a "build").

Release stage: Combines the build with the deployment's current configuration.

Run stage: Runs the application in the execution environment.

This strict separation ensures a consistent and reliable deployment process.

VI. Processes
Execute the app as one or more stateless processes

The application should be executed as one or more stateless processes. Any data that needs to be persisted should be stored in a stateful backing service (like a database). This makes the application more resilient, as any failing process can be easily replaced without any loss of data.

VII. Port Binding
Export services via port binding

The application should be self-contained and export its services via port binding, listening for requests on a specific port. This makes the application a resource that can be consumed by other services on the network.

VIII. Concurrency
Scale out via the process model

Concurrency is achieved by scaling out the application horizontally by running multiple processes. The application should be designed so that you can add more concurrent processes to handle a larger workload.

IX. Disposability
Maximize robustness with fast startup and graceful shutdown

The application's processes should be disposable, meaning they can be started or stopped at a moment's notice. This allows for rapid elastic scaling, fast deployments of code or configuration changes, and robust production deployments.

X. Dev/Prod Parity
Keep development, staging, and production as similar as possible

The gap between development and production environments should be kept as small as possible. This helps to catch bugs early and ensures that the application will behave as expected when deployed to production.

XI. Logs
Treat logs as event streams

Logs should be treated as a stream of events that are written to standard output. The execution environment is then responsible for collecting, processing, and routing these log streams to their final destination.

XII. Admin Processes
Run admin/management tasks as one-off processes

Administrative tasks, such as database migrations or running a console, should be run as one-off processes in an identical environment as the application's regular long-running processes.
