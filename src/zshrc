#!/bin/zsh


# Get the directory where this zshrc file is located
# Since .zshrc is always symlinked by the install script, follow the symlink
DOTFILES_DIR="$(readlink ~/.zshrc | sed 's|/src/zshrc$||')/src"

# Set USER_NAME for the banner (can be overridden by setting USER_NAME in your environment)
export USER_NAME="${USER_NAME:-jesse}"

# Source aliases and functions from the same directory
source "$DOTFILES_DIR/aliases"
source "$DOTFILES_DIR/functions"
export PATH="${DOTFILES_DIR%/src}/bin:$PATH"

# Configure Homebrew before all packages managed by homebrew
# Check for Homebrew on different platforms
if [[ -f /opt/homebrew/bin/brew ]]; then
    # macOS Apple Silicon
    eval "$(/opt/homebrew/bin/brew shellenv)"
elif [[ -f /usr/local/bin/brew ]]; then
    # macOS Intel
    eval "$(/usr/local/bin/brew shellenv)"
elif [[ -f /home/linuxbrew/.linuxbrew/bin/brew ]]; then
    # Linux
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

#------------------------------------------------------------------
# Tab autocompletion menu
#------------------------------------------------------------------

# Set LS_COLORS variable for both eza and compinit
export LS_COLORS="$(vivid generate solarized-dark)"
#To preview all vivid themes:
#for theme in $(vivid themes); do
#    echo "Theme: $theme"
#    LS_COLORS=$(vivid generate $theme)
#    ls
#    echo
#done

# Use a menu for completion selection
zstyle ':completion:*' menu select

# Make completion case-insensitive
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# Group completions by type
zstyle ':completion:*' group-name ''

# Add color to the completion menu
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"

# Add helpful descriptions to some completions
zstyle ':completion:*:descriptions' format '%F{green}-- %d --%f'

# Load the completion system, using a cache file for speed
autoload -Uz compinit
compinit -i -d ~/.zcompdump

#------------------------------------------------------------------
# Program configurations
#------------------------------------------------------------------

# Configure starship
eval "$(starship init zsh)"

# Configure zoxide
eval "$(zoxide init zsh)"

# Configure fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Configure cargo
. "$HOME/.cargo/env"

# Configure nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

# Configure man
export MANPAGER="sh -c 'col -bx | bat -l man -p'"
export MANROFFOPT="-c"

# Configure zellij
eval "$(zellij setup --generate-auto-start zsh)"

# Configure zsh-autosuggestions
# Check for zsh-autosuggestions in common locations
if [[ -f /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]]; then
    # macOS Apple Silicon
    source /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh
elif [[ -f /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]]; then
    # macOS Intel
    source /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh
elif [[ -f /home/linuxbrew/.linuxbrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]]; then
    # Linux
    source /home/linuxbrew/.linuxbrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh
fi
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#555555" # muted gray
ZSH_AUTOSUGGEST_STRATEGY=(history completion)

# Configure zsh-syntax-highlighting
# Check for zsh-syntax-highlighting in common locations
if [[ -f /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]]; then
    # macOS Apple Silicon
    source /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
elif [[ -f /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]]; then
    # macOS Intel
    source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
elif [[ -f /home/linuxbrew/.linuxbrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]]; then
    # Linux
    source /home/linuxbrew/.linuxbrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

# Add $HOME/.local/bin to PATH (used by uv for Python package installations)
export PATH="$HOME/.local/bin:$PATH"

#------------------------------------------------------------------
# Startup Banner
#------------------------------------------------------------------

generate_banner() {
  # --- CHOOSE YOUR THEME ---
  # Options: "slytherin_dungeon", "matrix_green", "azure_serenity", "golden_hour"
  local THEME="slytherin_dungeon"

  # --- CONFIGURATION ---
  local BANNER_WIDTH=76
  local FIGLET_TEXT="${USER_NAME:-jesse}" # This will be the centerpiece
  local FIGLET_FONT="roman"
  local BORDER NAME INFO RESET

  # --- COLOR THEMES ---
  case "$THEME" in
    "slytherin_dungeon")
      # An elegant, high-contrast theme based on design principles.
      if [[ "$COLORTERM" = "truecolor" || "$COLORTERM" = "24bit" ]]; then
        BORDER=$'\e[38;2;26;71;42m'     # Deep Emerald Green (Frame)
        NAME=$'\e[38;2;80;255;112m'     # Lumos Green (Focal Point)
        INFO=$'\e[38;2;234;234;234m'    # Pure Silver (Secondary Info)
      else
        BORDER=$'\e[38;5;22m'
        NAME=$'\e[38;5;83m'
        INFO=$'\e[38;5;255m'
      fi
      ;;
    "azure_serenity")
      # A cool, balanced, and calming theme using a split-complementary color scheme.
      if [[ "$COLORTERM" = "truecolor" || "$COLORTERM" = "24bit" ]]; then
        BORDER=$'\e[38;2;76;158;255m'   # Soft Sky Blue (Complementary Frame)
        NAME=$'\e[38;2;255;198;76m'     # Vibrant Saffron Yellow (Focal Point, the key)
        INFO=$'\e[38;2;255;110;76m'     # Muted Red-Orange (Complementary Info)
      else
        BORDER=$'\e[38;5;75m'
        NAME=$'\e[38;5;214m'
        INFO=$'\e[38;5;208m'
      fi
      ;;
    "golden_hour")
      # A warm, inviting, and high-contrast theme using a classic complementary scheme.
      if [[ "$COLORTERM" = "truecolor" || "$COLORTERM" = "24bit" ]]; then
        BORDER=$'\e[38;2;12;23;45m'     # Dark Midnight Blue (Frame)
        NAME=$'\e[38;2;255;193;7m'      # Bright Gold (Focal Point, the key)
        INFO=$'\e[38;2;200;200;200m'    # Light Grey (Secondary Info)
      else
        BORDER=$'\e[38;5;236m'
        NAME=$'\e[38;5;220m'
        INFO=$'\e[38;5;252m'
      fi
      ;;
    *) # Default to Matrix Green
      if [[ "$COLORTERM" = "truecolor" || "$COLORTERM" = "24bit" ]]; then
        BORDER=$'\e[38;2;0;180;0m'; NAME=$'\e[38;2;0;255;0m'; INFO=$'\e[38;2;127;255;127m'
      else
        BORDER=$'\e[38;5;28m'; NAME=$'\e[38;5;46m'; INFO=$'\e[38;5;120m'
      fi
      ;;
  esac
  RESET=$'\e[0m'

  # --- BORDER CHARACTERS ---
  local TL="╔" TR="╗" BL="╚" BR="╝" H="═" V="║"

  # --- UTILITY FUNCTION TO CENTER TEXT ---
  center_text() {
    local text="$1"; local color="$2"
    local text_no_color
    text_no_color=$(echo -e "$text" | sed 's/\x1b\[[0-9;]*m//g')
    local text_len=${#text_no_color}
    local padding_total=$((BANNER_WIDTH - 2 - text_len))
    [[ $padding_total -lt 0 ]] && padding_total=0
    local padding_left=$((padding_total / 2))
    local padding_right=$((padding_total - padding_left))
    printf "${BORDER}%s${RESET}" "$V"
    printf "%*s" "$padding_left" ""
    printf "%s%s%s" "$color" "$text" "$RESET"
    printf "%*s" "$padding_right" ""
    printf "${BORDER}%s\n${RESET}" "$V"
  }

  # --- PREPARE & DRAW ---
  local figlet_output
  figlet_output=$(figlet -f "$FIGLET_FONT" "$FIGLET_TEXT")
  local NOW
  NOW=$(date +"%A, %B %d, %Y - %r")
  echo
  printf "${BORDER}%s" "$TL"; for (( i=0; i<$BANNER_WIDTH-2; i++ )); do printf "%s" "$H"; done; printf "%s\n${RESET}" "$TR"
  center_text "Welcome" "$INFO"
  center_text "" ""
  while IFS= read -r line; do center_text "$line" "$NAME"; done <<< "$figlet_output"
  center_text "" ""
  center_text "$NOW" "$INFO"
  printf "${BORDER}%s" "$BL"; for (( i=0; i<$BANNER_WIDTH-2; i++ )); do printf "%s" "$H"; done; printf "%s\n${RESET}" "$BR"
}

# --- RUN THE BANNER ---
generate_banner
unset -f generate_banner

#------------------------------------------------------------------
# History Settings
#------------------------------------------------------------------
HISTSIZE=10000                  # How many lines of history to keep in memory
SAVEHIST=10000                  # How many lines to save to the history file
HISTFILE=~/.zsh_history         # Where to save history
setopt INC_APPEND_HISTORY       # Append commands to history immediately
setopt SHARE_HISTORY            # Share history between all open terminals
setopt HIST_IGNORE_ALL_DUPS     # If you type the same command twice in a row, only save it once
setopt HIST_IGNORE_SPACE        # Commands starting with a space are not saved to history
setopt HIST_FIND_NO_DUPS        # When searching, don't show repeated commands

